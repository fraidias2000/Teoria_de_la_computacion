package javaapplication20;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\005\000\002\002\004\000\002\013" +
    "\004\000\002\013\003\000\002\003\006\000\002\014\002" +
    "\000\002\006\006\000\002\006\003\000\002\006\004\000" +
    "\002\006\004\000\002\004\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\015" +
    "\002\000\002\010\006\000\002\005\005\000\002\011\004" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\016\002\000\002\017\002\000\002\020\002\000\002" +
    "\012\025" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\006\006\001\002\000\004\002\076\001" +
    "\002\000\004\007\024\001\002\000\004\011\007\001\002" +
    "\000\006\003\012\005\011\001\002\000\004\012\022\001" +
    "\002\000\012\005\011\012\ufffe\013\ufffe\015\ufffe\001\002" +
    "\000\006\012\017\013\020\001\002\000\006\012\ufffa\013" +
    "\ufffc\001\002\000\004\013\015\001\002\000\006\003\012" +
    "\005\011\001\002\000\004\012\ufffb\001\002\000\004\012" +
    "\ufff8\001\002\000\004\012\ufff9\001\002\000\010\012\uffff" +
    "\013\uffff\015\uffff\001\002\000\004\007\ufffd\001\002\000" +
    "\004\010\042\001\002\000\004\011\025\001\002\000\006" +
    "\003\027\005\011\001\002\000\006\012\040\015\037\001" +
    "\002\000\006\012\035\013\036\001\002\000\004\015\ufff2" +
    "\001\002\000\004\010\ufff7\001\002\000\004\015\033\001" +
    "\002\000\004\004\034\001\002\000\006\012\ufff1\015\ufff1" +
    "\001\002\000\004\010\ufff3\001\002\000\004\010\ufff4\001" +
    "\002\000\006\003\027\005\011\001\002\000\004\010\ufff5" +
    "\001\002\000\004\010\ufff6\001\002\000\004\011\044\001" +
    "\002\000\004\002\001\001\002\000\010\003\050\004\046" +
    "\012\047\001\002\000\012\002\uffee\003\050\004\046\012" +
    "\047\001\002\000\004\013\053\001\002\000\004\002\uffec" +
    "\001\002\000\004\014\052\001\002\000\004\002\ufff0\001" +
    "\002\000\004\002\uffed\001\002\000\004\016\054\001\002" +
    "\000\004\013\055\001\002\000\004\005\011\001\002\000" +
    "\004\013\057\001\002\000\004\005\011\001\002\000\004" +
    "\013\uffeb\001\002\000\004\013\062\001\002\000\004\005" +
    "\011\001\002\000\004\013\uffea\001\002\000\004\013\065" +
    "\001\002\000\004\005\011\001\002\000\004\013\uffe9\001" +
    "\002\000\004\013\070\001\002\000\004\017\071\001\002" +
    "\000\004\013\072\001\002\000\004\020\073\001\002\000" +
    "\004\014\074\001\002\000\012\002\uffe8\003\uffe8\004\uffe8" +
    "\012\uffe8\001\002\000\004\002\uffef\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\022\001\001\000\002\001\001\000\006" +
    "\006\007\013\012\001\001\000\002\001\001\000\004\013" +
    "\020\001\001\000\002\001\001\000\004\014\013\001\001" +
    "\000\002\001\001\000\006\006\015\013\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\042\001\001\000" +
    "\002\001\001\000\010\007\030\010\025\013\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\040\010\025\013\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\050\012\044\001\001\000\006\011\074\012\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\055\001\001\000\002\001" +
    "\001\000\004\013\057\001\001\000\004\016\060\001\001" +
    "\000\002\001\001\000\004\013\062\001\001\000\004\017" +
    "\063\001\001\000\002\001\001\000\004\013\065\001\001" +
    "\000\004\020\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	ArrayList<String> listaTrabajadores = new ArrayList<String>();
	static int trabajadores = 0;

	private void nuevoTrabajador(String trabajador){
		if (listaTrabajadores.contains(trabajador)){
			System.out.println("Aviso: trabajador " + trabajador + "  repetido.");
		}
		else{
			listaTrabajadores.add(trabajador.trim());
			trabajadores++; 
				
		}
	}

	ArrayList<String> listaCargos = new ArrayList<String>();

	private void nuevoCargo(String cargo){
		if (listaCargos.contains(cargo)){
			System.out.println("Aviso: cargo " + cargo + "  repetido.");
		}
		else{
			listaCargos.add(cargo.trim());
				
		}
	}

	ArrayList<String> listaDepartamentos = new ArrayList<String>();

	private void nuevoDepartamento(String departamento){
		if (listaDepartamentos.contains(departamento)){
			System.out.println("Aviso: departamento " + departamento + "  repetido.");
		}
		else{
			listaDepartamentos.add(departamento.trim());
				
		}
	}
	
	private boolean departamentoOK(String departamento){
		if (!listaDepartamentos.contains(departamento.trim())){
			System.out.println("Error: departamento " + departamento + " no definido.");
			return false;
		}
		else {
			return true;
		}
	}
	private boolean cargoOK(String cargo){
		if (!listaCargos.contains(cargo.trim())){
			System.out.println("Error: cargo " + cargo + " no definido.");
			return false;
		}
		else {
			return true;
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= MIS_CARGOS MIS_DEPARTAMENTOS MIS_TRABAJADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NOMBRE ::= PALABRA NOMBRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NOMBRE ::= PALABRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MIS_CARGOS ::= CARGOS PAR_ENT CONJUNTO_CARGOS PAR_SAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MIS_CARGOS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int cargoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cargoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cargo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 nuevoCargo(cargo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONJUNTO_CARGOS ::= NOMBRE NT$0 PYC CONJUNTO_CARGOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cargoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cargoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cargo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_CARGOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONJUNTO_CARGOS ::= NOMBRE 
            {
              Object RESULT =null;
		int cargoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cargoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cargo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nuevoCargo(cargo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_CARGOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONJUNTO_CARGOS ::= error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_CARGOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONJUNTO_CARGOS ::= error PAR_SAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_CARGOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MIS_DEPARTAMENTOS ::= DEPARTAMENTOS PAR_ENT CONJUNTO_DEPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MIS_DEPARTAMENTOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONJUNTO_DEPAR ::= INFORMACION_DEPAR COMA CONJUNTO_DEPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_DEPAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONJUNTO_DEPAR ::= INFORMACION_DEPAR PAR_SAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_DEPAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONJUNTO_DEPAR ::= error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_DEPAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONJUNTO_DEPAR ::= error PAR_SAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_DEPAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int departamentoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int departamentoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object departamento = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 nuevoDepartamento(departamento); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INFORMACION_DEPAR ::= NOMBRE NT$1 COMA CIFRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int departamentoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int departamentoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object departamento = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFORMACION_DEPAR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MIS_TRABAJADORES ::= TRABAJADORES PAR_ENT CONJUNTO_TRABAJ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MIS_TRABAJADORES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONJUNTO_TRABAJ ::= PERSONA CONJUNTO_TRABAJ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_TRABAJ",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONJUNTO_TRABAJ ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_TRABAJ",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONJUNTO_TRABAJ ::= error SALTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_TRABAJ",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONJUNTO_TRABAJ ::= PAR_SAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_TRABAJ",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =null;
		int trabajadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trabajadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object trabajador = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 nuevoTrabajador(trabajador); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int trabajadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int trabajadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object trabajador = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cargoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cargoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cargo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
cargoOK(cargo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int trabajadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int trabajadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object trabajador = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cargoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cargoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cargo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int departamentoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int departamentoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object departamento = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
departamentoOK(departamento);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PERSONA ::= CIFRA PYC CONTRASENYA PYC NOMBRE PYC NOMBRE NT$2 PYC NOMBRE NT$3 PYC NOMBRE NT$4 PYC CORREO PYC TELEFONO SALTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int trabajadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int trabajadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object trabajador = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int cargoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cargoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object cargo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int departamentoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int departamentoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object departamento = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PERSONA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
